const Button = ReactBootstrap.Button;
const ButtonGroup = ReactBootstrap.ButtonGroup;
const Grid = ReactBootstrap.Grid;
const Row = ReactBootstrap.Row;
const Col = ReactBootstrap.Col;



const LB_PER_KG = 2.20462;

var UNITS = {
              weight1: {
                  imperial: { units: "pounds", abbreviation: "lb", rangeMin: 10, rangeMax: 1000, convert: function(imperial) { return imperial/LB_PER_KG; } },
                  metric: { units: "kilograms", abbreviation: "kg", rangeMin: 10, rangeMax: 500, convert: function(metric) { return metric*LB_PER_KG } }
                }
            };

var NUM_SIG_DIGITS = 3;
var NUM_ANSWERS = 4;

const MESSAGES = {
  start: [ "What do you think?", "Wanna take a guess?" ],
  success: [ "Well done!", "Awesome!", "You're a star!", "You aren't cheating, are you?", "Tres bien!" ],
  failure: ["Too bad.", "Better luck next time.", "Sorry, it takes practice."],
  random: function(type) {
    if (this.hasOwnProperty(type) && type!="random")  // wowsers - get function name dynamically?
      return this[type][getRandom(0, this[type].length, true)];
    else {
      console.error('Type "' + type + '" is not a valid property of MESSAGES.');
      return "Message type error.";
    }
  }
}


function getRandom(min, max, isInt) {
  if (isInt)
    return Math.floor(Math.random() * (max - min) + min);
  else
    return Math.random() * (max - min) + min;
}

// button statuses

const BTN_DEFAULT = "primary";
const BTN_CORRECT = "success";
const BTN_WRONG = "danger";


/*********************************************************************/
/*********************************************************************/

class Choices extends React.Component {

  render() {
    // console.log("Choices.render");
    // console.log(this.props.btnStatus.isEnabled);

    var myCode = "";

    return (
      <div className="center">
        <ButtonGroup bsSize="large">
          {this.props.choices.map(
            (choice, i) => {
              return <Button bsSize="large" bsStyle={this.props.btnStatus.code[i]} key={i}
                       onClick={this.onGuess.bind(this, i)} disabled={!this.props.btnStatus.isEnabled[i]} >
                    {choice}&nbsp;{UNITS[this.props.currentMeasurement][(this.props.isImpToMet)?"metric":"imperial"].abbreviation}
                </Button> })}
        </ButtonGroup>
      </div>
    );
  }
  onGuess(guessIndex) {
    console.log("Choices.onGuess");
    this.props.passGuess(guessIndex);
  }
}

/*********************************************************************/
/*********************************************************************/

class Message extends React.Component {
  render() {
    return (
      <h4 className="center">{this.props.message}</h4>
    )
  }
}

/*********************************************************************/
/*********************************************************************/

class Question extends React.Component {

  render() {
    // console.log("Question.render");
    // console.log(this.props);

    return (
      <div>
        <h2 className="center">
          Convert&nbsp;
          {UNITS[this.props.currentMeasurement][(!this.props.isImpToMet)?"metric":"imperial"].units}
          &nbsp;to&nbsp;
          {UNITS[this.props.currentMeasurement][(this.props.isImpToMet)?"metric":"imperial"].units}
        </h2>

        <h3 className="center">
          How many&nbsp;
          {UNITS[this.props.currentMeasurement][(this.props.isImpToMet)?"metric":"imperial"].units}
          &nbsp;is&nbsp;
          {this.props.answer.questionNum}&nbsp;
          {UNITS[this.props.currentMeasurement][(!this.props.isImpToMet)?"metric":"imperial"].abbreviation}
        </h3>

        <Choices choices={this.props.choices}
            currentMeasurement={this.props.currentMeasurement}
            isImpToMet={this.props.isImpToMet}
            answer={this.props.answer}
            btnStatus={this.props.btnStatus}
            passGuess={this.passGuess.bind(this)}
         />

      </div>
    );
  }

  passGuess(guessIndex) {
    console.log("Question.passGuess");
    this.props.handleGuess(guessIndex);

  }

}

/*********************************************************************/
/*********************************************************************/

class Controls extends React.Component {

render() {
  var scoreString = this.props.score.correct + "/" + this.props.score.attempted + " correct";
  if (this.props.score.attempted>0)
    scoreString+= " " + Math.round(100*this.props.score.correct/this.props.score.attempted) + "%";
  console.log("Controls.render");
  console.log(this.props);
  return (

    <Grid>
      <Row className="show-grid">
        <Col className="find-cell right" md={2} >
          <Button bsStyle={BTN_DEFAULT} onClick={this.onNextQ.bind(this)}>Next Question</Button>
        </Col>
        <Col className="find-cell" md={6}>
          <Message message={this.props.message} />
        </Col>
        <Col className="find-cell center" md={2}>
          {scoreString}
        </Col>
        <Col className="find-cell left" md={2}>
          <Button bsStyle={BTN_CORRECT} onClick={this.onNewGame.bind(this)}>New Quiz</Button>
        </Col>
      </Row>
    </Grid>


    );
  }

  onNextQ() {
    this.props.handleNextQ();
  }
  onNewGame() {
    // this.props.handleNextQ();
  }
} // Controls

/*********************************************************************/
/*********************************************************************/

class Game extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      score: { correct: 0, attempted: 0 },
      difficulty: 99,
      currentMeasurement: "weight1",
      isImpToMet: true,
      choices: [],
      answer: { answerNum: 0, questionNum: 0, location: 0 },
      btnStatus: {
        code: Array(NUM_ANSWERS).fill(BTN_DEFAULT),
        isEnabled: Array(NUM_ANSWERS).fill("true")
      },
      message: MESSAGES.random("start")
    };
  }

  componentWillMount() {
    this.generateQ();
  }
/*********************************************************************/

  handleNextQ() {
    console.log("Game.handleNextQ");
    // console.log(UNITS[this.state.currentMeasurement]);
    var newMessage = MESSAGES.random("start");
    var newBtnStatus = { code: Array(NUM_ANSWERS).fill(BTN_DEFAULT), isEnabled: Array(NUM_ANSWERS).fill(true) };
    this.setState( { message: newMessage, btnStatus: newBtnStatus });
    this.generateQ();
  }

/*********************************************************************/

  handleGuess(guessIndex) {
    console.log("Game.handleGuess");
    // console.log(UNITS[this.state.currentMeasurement]);

    var newMessage;
    var newScore = this.state.score;
    var newBtnStatus = { code: Array(NUM_ANSWERS).fill("default"), isEnabled: Array(NUM_ANSWERS).fill(false)};

    if (guessIndex==this.state.answer.location) {
      newMessage = MESSAGES.random("success");
      newScore.correct++;
    } else {
      newMessage = MESSAGES.random("failure") + " The correct answer was " +
            this.state.answer.answerNum + " " +
            UNITS[this.state.currentMeasurement][(this.state.isImpToMet)?"metric":"imperial"].abbreviation;
    }
    newScore.attempted++;
    newBtnStatus.code[guessIndex]=BTN_WRONG;
    newBtnStatus.code[this.state.answer.location]=BTN_CORRECT;
    newBtnStatus.isEnabled[this.state.answer.location]=true;
    this.setState( { message: newMessage, btnStatus: newBtnStatus, score: newScore } );

  }

/*********************************************************************/

  generateQ() {

    // console.log("Game.generateQ");

    var curMin = UNITS[this.state.currentMeasurement][(this.state.isImpToMet)?"imperial":"metric"].rangeMin;
    var curMax = UNITS[this.state.currentMeasurement][(this.state.isImpToMet)?"imperial":"metric"].rangeMax;
    var rawNum = getRandom(curMin, curMax);
    var answerNum = UNITS[this.state.currentMeasurement][(this.state.isImpToMet)?"imperial":"metric"].convert(rawNum);
    var choices = [];
    var answerLoc = Math.floor(getRandom(0, NUM_ANSWERS));

    for (var i = 0; i < NUM_ANSWERS; i++) {
      choices[i] = this.prettyNum(answerNum*(1-(((this.state.difficulty/(NUM_ANSWERS-1))*(answerLoc-i))/100)));
    }

    rawNum = this.prettyNum(rawNum);
    answerNum = this.prettyNum(answerNum);
    this.setState( { choices: choices, answer: { location: answerLoc, answerNum: answerNum, questionNum: rawNum } } );
  }

/*********************************************************************/

  prettyNum(num) {
     var mult = Math.pow(10, NUM_SIG_DIGITS - Math.floor(Math.log10(num)) - 1);
     return Math.round(num * mult) / mult;
  }


/*********************************************************************/

  render() {
    // console.log("Game");
    // console.log(this.state);
    return (
      <div>
        <Question
            choices={this.state.choices}
            answer={this.state.answer}
            currentMeasurement={this.state.currentMeasurement}
            isImpToMet={this.state.isImpToMet}
            btnStatus={this.state.btnStatus}
            handleGuess={this.handleGuess.bind(this)}
        />

        <Controls handleNextQ={this.handleNextQ.bind(this)} score={this.state.score} message={this.state.message}/>
      </div>
    );
  }
} // Game
